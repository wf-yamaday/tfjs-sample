import React, {
  ChangeEvent,
  FormEvent,
  useCallback,
  useEffect,
  useState,
} from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';

import {
  Box,
  Button,
  CircularProgress,
  Container,
  Heading,
  Textarea,
  Text,
  Flex,
  Table,
  TableCaption,
  Thead,
  Th,
  Tr,
  Tbody,
  Td,
} from '@chakra-ui/react';

import * as tf from '@tensorflow/tfjs';
import * as toxicity from '@tensorflow-models/toxicity';

const threshold = 0.9;

const labelsToInclude = [
  'identity_attack',
  'insult',
  'obscene',
  'threat',
  'severe_toxicity',
  'sexual_explicit',
  'toxicity',
];

interface Result {
  label: string;
  results: {
    probabilities: Float32Array;
    match: boolean;
  }[];
}

const Home: NextPage = () => {
  const [text, setText] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [results, setResults] = useState<Result[]>([]);

  const onChangeHandler = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {
    setText(e.target.value);
  }, []);

  const submitHandler = useCallback(
    async (e: FormEvent<HTMLFormElement>) => {
      e.preventDefault();
      setIsLoading(true);
      const model = await toxicity.load(threshold, labelsToInclude);
      const pred = await model.classify([text]);
      setResults(pred);
      setIsLoading(false);
    },
    [text]
  );

  useEffect(() => {
    console.log(tf);
  }, []);

  return (
    <Container>
      <Head>
        <title>TensorFlow.js with Next.js</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Box mt={4}>
          <Heading size="lg" mb={4}>
            テキストの有害度検出
          </Heading>

          <form onSubmit={submitHandler}>
            <Textarea
              name="text"
              type="text"
              placeholder="i.e 'fuck you!!'"
              required
              value={text}
              onChange={onChangeHandler}
            />
            <Box textAlign="right" mt={2}>
              <Button type="submit">送信</Button>
            </Box>
          </form>

          {isLoading && (
            <Flex alignItems="center" justifyContent="center">
              <CircularProgress isIndeterminate />
              <Text fontSize="lg" ml="4">
                解析中です…
              </Text>
            </Flex>
          )}

          {!isLoading && results.length > 0 && (
            <Box>
              <Table variant="simple">
                <TableCaption>各ラベルの推論結果</TableCaption>
                <Thead>
                  <Tr>
                    <Th>ラベル名</Th>
                    <Th>判定</Th>
                    <Th>確率1</Th>
                    <Th>確率2</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {results.map((result, i) => (
                    <Tr key={i}>
                      <Td>{result.label}</Td>
                      {result.results.map((item) => (
                        <>
                          <Td>
                            {item.match === null ? (
                              '不明'
                            ) : item.match ? (
                              <Text color="red.300" fontWeight="bold">
                                はい
                              </Text>
                            ) : (
                              'いいえ'
                            )}
                          </Td>
                          <Td>{item.probabilities[0].toFixed(4)}</Td>
                          <Td>{item.probabilities[1].toFixed(4)}</Td>
                        </>
                      ))}
                    </Tr>
                  ))}
                </Tbody>
              </Table>
            </Box>
          )}
        </Box>
      </main>
    </Container>
  );
};

export default Home;
